# -*- coding: utf-8 -*-
"""TGO.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sxLtUBocnctYvj9T21yrp0iFv8bVaZkk

# Declare Array (Random Number Sequence)
"""

arraySoal = [4,1,13,7,0,2,8,11,3]
arr1 = [10, 22, 9, 33, 21, 50, 41, 60]
arr2 = [15, 13, 14, 16, 17, 19 ,20]
arr3 = [5, 4, 6, 7, 9 ,2]

"""# Lmis and Recursion Function"""

global maxlength

def recursionlmis(arr, n):
  global maxlength

  # Base Case
  if n == 1:
    return 1
    
  maxEndingHere = 1

  for i in range(1, n):
    res = recursionlmis(arr, i)
    if arr[i-1] < arr[n-1] and res+1 > maxEndingHere:
      maxEndingHere = res + 1
  maxlength = max(maxlength, maxEndingHere)
  return maxEndingHere


def lmis(arr):
  global maxlength
  n = len(arr)
  maxlength = 1
  recursionlmis(arr, n)
  print("Array = {}".format(arr))
  return "Longest Monotonically Increasing Subsequence = {}".format(maxlength)

"""# Test the Function"""

print(lmis(arraySoal))

print(lmis(arr1))
print(lmis(arr2))
print(lmis(arr3))

